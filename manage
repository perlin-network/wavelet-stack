#! /usr/bin/env bash

stackName='testnet_local'

function stackRunning() {
	docker stack ps ${stackName} >/dev/null 2>/dev/null
}

function volumesExist() {
	docker volume list -q | grep "^${stackName}_wavelet_wavelet_db_instance_" >/dev/null
}

function stop() {
	while stackRunning; do
		docker stack rm ${stackName}
		sleep 0.5
	done

	if [ "${WAVELET_CLEAN_VOLUMES}" = 'yes' ]; then
		while volumesExist; do
			docker volume prune -f
			sleep 0.5
		done
	fi
}

function start() {
	docker stack deploy -c docker-compose.yml "${stackName}"
}

function status() {
	if stackRunning; then
		echo 'RUNNING'
	else
		echo 'NOT RUNNING'
	fi

	return 0
}

function containerIDFromNodeID() {
	local nodeID taskID containerID

	nodeID="$1"
	if [ -z "${nodeID}" ]; then
		echo "ID Required" >&2
		usage >&2
		return 1
	fi

	taskID="$(docker stack ps -q -f NAME="${stackName}_wavelet.${nodeID}" "${stackName}")" || return 1
	containerID="$(docker inspect "${taskID}" | jq -crM '.[0].Status.ContainerStatus.ContainerID')" || return 1

	echo "${containerID}"
}

function attach() {
	local nodeID containerID

	nodeID="$1"
	containerID="$(containerIDFromNodeID "${nodeID}")" || return 1

	docker attach "${containerID}"
}

function shell() {
	local nodeID containerID

	nodeID="$1"
	containerID="$(containerIDFromNodeID "${nodeID}")" || return 1

	docker exec -it "${containerID}" bash
}

function usage() {
	echo "Usage: manage [-s <stackName>] {stop|start|update|restart|status}"
	echo "       manage [-s <stackName>] attach <nodeId>"
	echo "       manage [-s <stackName>] shell <nodeId>"
}

while getopts 's:' arg; do
	case "${arg}" in
		s)
			stackName="${OPTARG}"
			;;
		':'|'?')
			usage >&2
			exit 1
			;;
	esac
done
shift $[${OPTIND} - 1]

action="$1"
shift

envFileDir="$(dirname "${BASH_SOURCE[0]}")/config"
globalEnvFile="${envFileDir}/DEFAULT"
if [ -f "${globalEnvFile}" ]; then
	. "${globalEnvFile}"
fi

stackEnvFile="${envFileDir}/${stackName}"
if [ -f "${stackEnvFile}" ]; then
	. "${stackEnvFile}"
fi
export REGISTRY WAVELET_BENCHMARK_NODES WAVELET_GENESIS WAVELET_KEYS WAVELET_NODES WAVELET_RICH_WALLETS
export WAVELET_SNOWBALL_K WAVELET_SNOWBALL_BETA

case "${action}" in
	stop)
		stop
		exit "$?"
		;;
	start|update)
		start
		exit "$?"
		;;
	restart)
		stop || exit "$?"
		start
		exit "$?"
		;;
	status|'')
		status
		exit "$?"
		;;
	attach|shell)
		"${action}" "$@"
		exit "$?"
		;;
	help)
		usage
		exit 0
		;;
	*)
		usage >&2
		exit 1
		;;
esac
