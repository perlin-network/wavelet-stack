#! /usr/bin/env bash

configDir="/usr/local/etc/haproxy"
configFileTemplate="${configDir}/haproxy.cfg.in"
configFile="${configDir}/haproxy.cfg"

function cachePeers() {
	local peerData mappingData

	if [ -n "${peersCache}" -a -n "${externalMappingCache}" ]; then
		return
	fi

	while true; do
		peerData="$(curl -sS http://sync:2379/v2/keys/peers)" || peerData=''
		if [ -n "${peerData}" ]; then
			break
		fi
		sleep 1
	done

	while true; do
		mappingData="$(curl -sS http://sync:2379/v2/keys/mapping)" || mappingData=''
		if [ -n "${mappingData}" ]; then
			break
		fi
		sleep 1
	done

	peersCache="${peerData}"
	externalMappingCache="${mappingData}"

	return 0
}

function uncachePeers() {
	unset peersCache
	unset externalMappingCache
}

function getPeers() {
	echo "${peersCache}" | jq -crM '.node.nodes[].key' 2>/dev/null | sed 's@^.*/@@' | sort
}

function getNode1() {
	local value

	value="$(curl -sS http://sync:2379/v2/keys/peers/1 | jq -crM .node.value)"
	if [ "${value}" = 'null' ]; then
		value=''
	fi

	echo "${value}"
}

function getMappingData() {
	local peer field
	local data

	peer="$1"
	field="$2"

	data="$(echo "${externalMappingCache}" | jq -crM '.node.nodes[] | select(.key == "/mapping/'"${peer}"'") | .value')"

	echo "${data}" | cut -f "${field}" -d /
}

function getPeerLBPort() {
	local peer
	local port

	peer="$1"

	port="$(getMappingData "${peer}" 3)"

	echo "${port}"
}

function getPeerWaveletAddr() {
	local peer
	local data addr

	peer="$1"

	data="$(echo "${peersCache}" | jq -crM '.node.nodes[] | select(.key == "/peers/'"${peer}"'") | .value')"

	echo "${data}" | sed 's@:[^:]*$@@'
}

function getPeerWaveletPort() {
	local peer
	local port

	peer="$1"

	port="$(getMappingData "${peer}" 2)"

	echo "${port}"
}

function generateHAProxyRPCConfiguration() {
	local id peer waveletAddr waveletPort lbPort

	if [ -f /tmp/wavelet-disable-rpc -o "${WAVELET_NO_RPC}" = 'true' ]; then
		return 0
	fi

	for peer in $(getPeers); do
		waveletAddr="$(getPeerWaveletAddr "${peer}")"
		waveletPort="$(getPeerWaveletPort "${peer}")"
		lbPort="$(getPeerLBPort "${peer}")"

		if [ -z "${lbPort}" -o -z "${waveletPort}" -o -z "${waveletAddr}" ]; then
			continue
		fi

		echo "frontend wavelet-rpc-front-${peer}"
		echo "    bind :::${lbPort} v4v6"
		echo "    default_backend wavelet-rpc-back-${peer}"
		echo ""
		echo "backend wavelet-rpc-back-${peer}"
		echo "    server wavelet-rpc-${peer} ${waveletAddr}:${waveletPort}"
		echo ""
	done

	return 0
}

function generateHAProxyAPIConfiguration() {
	local id peer

	if [ -f /tmp/wavelet-disable-api ]; then
		return 0
	fi

	echo "frontend wavelet-api-front"
	echo "    bind :::80 v4v6"
	echo "    default_backend wavelet-api-back"
	echo ""
	echo "backend wavelet-api-back"
	echo "    mode http"

	for peer in $(getNode1); do
		id="$(echo "${peer}" | sha1sum | cut -c 1-24)"
		peer="$(echo "${peer}" | cut -f 1 -d :)"

		echo "    server wavelet-api-${id} ${peer}:9000 check"
	done

	return 0
}


function updateConfig() {
	local waveletRPCConfig waveletAPIConfig haproxyPids

	uncachePeers
	cachePeers

	waveletRPCConfig="$(generateHAProxyRPCConfiguration)" || return

	waveletAPIConfig="$(generateHAProxyAPIConfiguration)" || return

	awk \
		-v "waveletRPCConfig=${waveletRPCConfig}" \
		-v "waveletAPIConfig=${waveletAPIConfig}" \
		'
			/@@WAVELET_RPC_CONFIG@@/{
				print waveletRPCConfig;
				next;
			}

			/@@WAVELET_API_CONFIG@@/{
				print waveletAPIConfig;
				next;
			}

			{ print; }
	' < "${configFileTemplate}" > "${configFile}.new" || return

	if ! cmp "${configFile}" "${configFile}.new" >/dev/null 2>/dev/null; then
		mv "${configFile}.new" "${configFile}"

		haproxyPids=($(pgrep -x haproxy))
		if [ -n "${haproxyPids[*]}" ]; then
			kill -USR2 "${haproxyPids[@]}"
		fi
	fi

	rm -f "${configFile}.new"
}

# Periodically create the config file
while true; do
	updateConfig

	sleep 10
done &

# Wait for the config file to be created
while true; do
	if [ -f "${configFile}" ]; then
		break
	fi
	sleep 1
done

exit 0
