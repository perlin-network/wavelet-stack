#! /usr/bin/env bash

# This script manages the HAProxy for a Wavelet Stack.
#
# Due to the way Wavelet and Docker both work, it is
# currently nessecary to use the load balancer for RPC
# connections.

configDir="/usr/local/etc/haproxy"
configFileTemplate="${configDir}/haproxy.cfg.in"
configFile="${configDir}/haproxy.cfg"

# Internal function to cache mapping of all peers to avoid lookups
# for each peer individually when creating a configuration.
# This reads the etcd key trees "peers" (which are populated
# by "wavelet" instances) and "mapping" (which is populated
# by the "manage-stack" script when a Wavelet Stack is started
# or updated).
function cachePeers() {
	local peerData mappingData

	if [ -n "${peersCache}" -a -n "${externalMappingCache}" ]; then
		return
	fi

	while true; do
		peerData="$(curl -sS http://sync:2379/v2/keys/peers)" || peerData=''
		if [ -n "${peerData}" ]; then
			break
		fi
		sleep 1
	done

	while true; do
		mappingData="$(curl -sS http://sync:2379/v2/keys/mapping)" || mappingData=''
		if [ -n "${mappingData}" ]; then
			break
		fi
		sleep 1
	done

	peersCache="${peerData}"
	externalMappingCache="${mappingData}"

	return 0
}

# Clean up the peers cache, so that next time a lookup occurs it pulls in fresh cache
function uncachePeers() {
	unset peersCache
	unset externalMappingCache
}

# Get all peers, from cache -- must have populated the cache prior to calling this function
function getPeers() {
	echo "${peersCache}" | jq -crM '.node.nodes[].key' 2>/dev/null | sed 's@^.*/@@' | sort
}

# Get the information for the lowest numbered peer (usually 1)
function getNode1() {
	local peer
	local value

	peer="$(getPeers | sort -n | head -n 1)"

	value="$(curl -sS "http://sync:2379/v2/keys/peers/${peer}" | jq -crM .node.value | head -n 1)"
	if [ "${value}" = 'null' ]; then
		value=''
	fi

	echo "${value}"
}

# Get external<->internal port mapping data from the cache
function getMappingData() {
	local peer field
	local data

	peer="$1"
	field="$2"

	data="$(echo "${externalMappingCache}" | jq -crM '.node.nodes[] | select(.key == "/mapping/'"${peer}"'") | .value' 2>/dev/null | head -n 1)"

	echo "${data}" | cut -f "${field}" -d /
}

# Get the loadbalancer port for a given node ID.  This is the internal port the
# loadbalancer will listen on to map to the RPC port for a given Wavelet node.
function getPeerLBPort() {
	local peer
	local port

	peer="$1"

	port="$(getMappingData "${peer}" 3)"

	echo "${port}"
}

# Get the peer internal IP address for a Wavelet node.
function getPeerWaveletAddr() {
	local peer
	local data addr

	peer="$1"

	data="$(echo "${peersCache}" | jq -crM '.node.nodes[] | select(.key == "/peers/'"${peer}"'") | .value' | head -n 1)"

	echo "${data}" | sed 's@:[^:]*$@@'
}

# Get the peer internal port for RPC for a Wavelet node.  If using exposed RPC for
# this stack then the port will the external port.
function getPeerWaveletPort() {
	local peer
	local port

	peer="$1"

	port="$(getMappingData "${peer}" 2)"

	echo "${port}"
}

# Generate the HAProxy configuration for all Wavelet RPC nodes.  If the file
# /tmp/wavelet-disable-rpc exists or WAVELET_NO_RPC is set to "true" then
# no configuration is generated.
function generateHAProxyRPCConfiguration() {
	local id peer waveletAddr waveletPort lbPort

	if [ -f /tmp/wavelet-disable-rpc -o "${WAVELET_NO_RPC}" = 'true' ]; then
		return 0
	fi

	for peer in $(getPeers); do
		waveletAddr="$(getPeerWaveletAddr "${peer}")"
		waveletPort="$(getPeerWaveletPort "${peer}")"
		lbPort="$(getPeerLBPort "${peer}")"

		if [ -z "${lbPort}" -o -z "${waveletPort}" -o -z "${waveletAddr}" ]; then
			continue
		fi

		echo "frontend wavelet-rpc-front-${peer}"
		echo "    bind :::${lbPort} v4v6"
		echo "    default_backend wavelet-rpc-back-${peer}"
		echo ""
		echo "backend wavelet-rpc-back-${peer}"
		echo "    server wavelet-rpc-${peer} ${waveletAddr}:${waveletPort}"
		echo ""
	done

	return 0
}

# Generate the HAProxy configuration for all Wavelet API nodes.  If the file
# /tmp/wavelet-disable-api exists then no configuration is generated.
# If WAVELET_API_HOST is specified, also listen on port 443/tcp and
# direct that to node 1's port 443/tcp
function generateHAProxyAPIConfiguration() {
	local id peer
	local waveletAddr lbPort

	if [ -f /tmp/wavelet-disable-api ]; then
		return 0
	fi

	echo "frontend wavelet-api-front"
	echo "    bind :::80 v4v6"
	echo "    default_backend wavelet-api-back"
	echo ""
	echo "backend wavelet-api-back"
	echo "    mode http"

	for peer in $(getNode1); do
		peer="$(echo "${peer}" | cut -f 1 -d :)"

		echo "    server wavelet-api ${peer}:9000"
	done
	echo ""

	if [ -n "${WAVELET_API_HOST}" ]; then
		echo "frontend wavelet-api-https-front"
		echo "    bind :::443 v4v6"
		echo "    default_backend wavelet-api-https-back"
		echo ""
		echo "backend wavelet-api-https-back"

		for peer in $(getNode1); do
			peer="$(echo "${peer}" | cut -f 1 -d :)"

			echo "    server wavelet-api-https ${peer}:443"
		done
		echo ""
	fi

	for peer in $(getPeers); do
		waveletAddr="$(getPeerWaveletAddr "${peer}")"

		if [ -z "${waveletAddr}" ]; then
			continue
		fi

		lbPort=$[9000 + $peer - 1]

		echo "frontend wavelet-api-front-${peer}"
		echo "    bind :::${lbPort} v4v6"
		echo "    default_backend wavelet-api-back-${peer}"
		echo ""
		echo "backend wavelet-api-back-${peer}"
		echo "    mode http"
		echo "    server wavelet-api-${peer} ${waveletAddr}:9000"
		echo ""
	done

	return 0
}

# Function to update the HAProxy configuration with the latest
# details for the stack.  If the new configuration differs from
# the currently running configuration, update the HAProxy
# configuration file and ask HAProxy to gracefully reload
# the configuration file.  Most of the global configuration
# comes from the template file specified as "configFileTemplate".
function updateConfig() {
	local waveletRPCConfig waveletAPIConfig haproxyPids

	uncachePeers
	cachePeers

	waveletRPCConfig="$(generateHAProxyRPCConfiguration)" || return

	waveletAPIConfig="$(generateHAProxyAPIConfiguration)" || return

	awk \
		-v "waveletRPCConfig=${waveletRPCConfig}" \
		-v "waveletAPIConfig=${waveletAPIConfig}" \
		'
			/@@WAVELET_RPC_CONFIG@@/{
				print waveletRPCConfig;
				next;
			}

			/@@WAVELET_API_CONFIG@@/{
				print waveletAPIConfig;
				next;
			}

			{ print; }
	' < "${configFileTemplate}" > "${configFile}.new" || return

	if ! cmp "${configFile}" "${configFile}.new" >/dev/null 2>/dev/null; then
		mv "${configFile}.new" "${configFile}"

		haproxyPids=($(pgrep -x haproxy))
		if [ -n "${haproxyPids[*]}" ]; then
			kill -USR2 "${haproxyPids[@]}"
		fi
	fi

	rm -f "${configFile}.new"
}

# Periodically create the config file
while true; do
	updateConfig

	sleep 10
done &

# Wait for the config file to be created
while true; do
	if [ -f "${configFile}" ]; then
		break
	fi
	sleep 1
done

exit 0
